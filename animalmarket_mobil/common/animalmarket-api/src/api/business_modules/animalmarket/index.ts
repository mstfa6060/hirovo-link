/*
!!! ATTENTION !!!
THIS FILE HAS BEEN AUTO-GENERATED
DO NOT EDIT THIS FILE
*/

// Imports 
import { AppConfig, api as axios } from '../../../config/animalmarket-config';
import { ApiService } from '../../../services';

// Custom Types 
type Guid = string;
type Double = number;

// Settings...

export namespace AnimalMarketAPI {

	export namespace Enums {

		export enum OfferStatus {
			Pending = 0,
			Accepted = 1,
			Rejected = 2,
			CounterOffered = 3,
			Expired = 4,
			Cancelled = 5,
		}

		export enum FarmType {
			Dairy = 0,
			Beef = 1,
			Mixed = 2,
			Poultry = 3,
			Sheep = 4,
			Goat = 5,
			Horse = 6,
			Organic = 7,
			Other = 8,
		}

		export enum BidStatus {
			Active = 0,
			Outbid = 1,
			Winning = 2,
			Won = 3,
			Lost = 4,
			Cancelled = 5,
			Rejected = 6,
		}

		export enum AnimalType {
			Cattle = 0,
			SmallRuminant = 1,
			Poultry = 2,
			Horse = 3,
			Other = 4,
		}

		export enum AnimalGender {
			Male = 0,
			Female = 1,
			Castrated = 2,
		}

		export enum AnimalSaleType {
			FixedPrice = 0,
			Auction = 1,
			Negotiable = 2,
		}

		export enum AnimalStatus {
			Active = 0,
			Sold = 1,
			Reserved = 2,
			Inactive = 3,
			Pending = 4,
		}

	}

	export namespace Offers {

		export namespace Reject {
			export const RequestPath = AppConfig.AnimalMarketUrl + '/Offers/Reject';
			export const Request = (data: IRequestModel) => ApiService.call<IResponseModel>(axios.post(RequestPath, { ...data }));
			export interface IRequestModel {
				offerId: Guid;
			}
			export interface IResponseModel {
				success: boolean;
			}
		}

		export namespace Create {
			export const RequestPath = AppConfig.AnimalMarketUrl + '/Offers/Create';
			export const Request = (data: IRequestModel) => ApiService.call<IResponseModel>(axios.post(RequestPath, { ...data }));
			export interface IRequestModel {
				animalId: Guid;
				buyerId?: Guid;
				offerAmount: number;
				message: string;
				expiryDate?: Date;
			}
			export interface IResponseModel {
				id: Guid;
				status: Enums.OfferStatus;
			}
		}

		export namespace Accept {
			export const RequestPath = AppConfig.AnimalMarketUrl + '/Offers/Accept';
			export const Request = (data: IRequestModel) => ApiService.call<IResponseModel>(axios.post(RequestPath, { ...data }));
			export interface IRequestModel {
				offerId: Guid;
			}
			export interface IResponseModel {
				success: boolean;
			}
		}

	}

	export namespace Farms {

		export namespace Detail {
			export const RequestPath = AppConfig.AnimalMarketUrl + '/Farms/Detail';
			export const Request = (data: IRequestModel) => ApiService.call<IResponseModel>(axios.post(RequestPath, { ...data }));
			export interface IRequestModel {
				farmId: Guid;
			}
			export interface IResponseModel {
				id: Guid;
				name: string;
				description: string;
				city: string;
				district: string;
				address: string;
				postalCode: string;
				licenseNumber: string;
				phoneNumber: string;
				email: string;
				website: string;
				totalArea?: number;
				type: Enums.FarmType;
				ownerId: Guid;
			}
		}

		export namespace All {
			export const RequestPath = AppConfig.AnimalMarketUrl + '/Farms/All';
			export const Request = (data: IRequestModel) => ApiService.call<IResponseModel>(axios.post(RequestPath, { ...data }));
			export interface IRequestModel {
				languageCode: string;
				page: number;
				pageSize: number;
				city: string;
				district: string;
			}
			export interface IResponseModel {
				farms: IFarmSummary[];
				totalCount: number;
				pageCount: number;
			}
			export interface IFarmSummary {
				id: Guid;
				name: string;
				city: string;
				district: string;
			}
		}

		export namespace Create {
			export const RequestPath = AppConfig.AnimalMarketUrl + '/Farms/Create';
			export const Request = (data: IRequestModel) => ApiService.call<IResponseModel>(axios.post(RequestPath, { ...data }));
			export interface IRequestModel {
				name: string;
				description: string;
				licenseNumber: string;
				address: string;
				city: string;
				district: string;
				postalCode: string;
				latitude: Double;
				longitude: Double;
				phoneNumber: string;
				email: string;
				website: string;
				totalArea?: number;
				type: Enums.FarmType;
				ownerId?: Guid;
			}
			export interface IResponseModel {
				id: Guid;
				name: string;
				city: string;
				district: string;
				licenseNumber: string;
			}
		}

	}

	export namespace Bids {

		export namespace Create {
			export const RequestPath = AppConfig.AnimalMarketUrl + '/Bids/Create';
			export const Request = (data: IRequestModel) => ApiService.call<IResponseModel>(axios.post(RequestPath, { ...data }));
			export interface IRequestModel {
				animalId: Guid;
				bidderId?: Guid;
				amount: number;
				message: string;
				isAutoBid: boolean;
				maxAutoBidAmount?: number;
				bidIncrement?: number;
			}
			export interface IResponseModel {
				id: Guid;
				status: Enums.BidStatus;
			}
		}

	}

	export namespace Animals {

		export namespace Pick {
			export const RequestPath = AppConfig.AnimalMarketUrl + '/Animals/Pick';
			export const Request = (data: IRequestModel) => ApiService.call<IResponseModel>(axios.post(RequestPath, { ...data }));
			export interface IRequestModel {
				search: string;
				limit?: number;
			}
			export interface IResponseModel {
				items: IPickItemDto[];
			}
			export interface IPickItemDto {
				id: Guid;
				name: string;
			}
		}

		export namespace Detail {
			export const RequestPath = AppConfig.AnimalMarketUrl + '/Animals/Detail';
			export const Request = (data: IRequestModel) => ApiService.call<IResponseModel>(axios.post(RequestPath, { ...data }));
			export interface IRequestModel {
				animalId: Guid;
			}
			export interface IResponseModel {
				id: Guid;
				name: string;
				description: string;
				type: Enums.AnimalType;
				breed: string;
				gender: Enums.AnimalGender;
				birthDate: Date;
				weight: number;
				healthStatus: string;
				price: number;
				isNegotiable: boolean;
				saleType: Enums.AnimalSaleType;
				status: Enums.AnimalStatus;
				latitude: Double;
				longitude: Double;
				city: string;
				district: string;
				sellerId: Guid;
				farmId: Guid;
				photos: IPhotoDto[];
				activeBidCount: number;
			}
			export interface IPhotoDto {
				id: Guid;
				url: string;
				order: number;
				isPrimary: boolean;
			}
		}

		export namespace All {
			export const RequestPath = AppConfig.AnimalMarketUrl + '/Animals/All';
			export const Request = (data: IRequestModel) => ApiService.call<IResponseModel>(axios.post(RequestPath, { ...data }));
			export interface IRequestModel {
				languageCode: string;
				page: number;
				pageSize: number;
				type?: Enums.AnimalType;
				breed: string;
				gender?: Enums.AnimalGender;
				minPrice?: number;
				maxPrice?: number;
				city: string;
				district: string;
				saleType?: Enums.AnimalSaleType;
				status?: Enums.AnimalStatus;
				minAgeMonths?: number;
				maxAgeMonths?: number;
				minWeight?: number;
				maxWeight?: number;
				sortBy: string;
				sortDirection: string;
			}
			export interface IResponseModel {
				animals: IAnimalSummaryModel[];
				totalCount: number;
				pageCount: number;
				currentPage: number;
				hasNextPage: boolean;
				hasPreviousPage: boolean;
			}
			export interface IAnimalSummaryModel {
				id: Guid;
				name: string;
				type: Enums.AnimalType;
				breed: string;
				gender: Enums.AnimalGender;
				price: number;
				isNegotiable: boolean;
				saleType: Enums.AnimalSaleType;
				status: Enums.AnimalStatus;
				city: string;
				district: string;
				distanceKm?: Double;
				ageMonths: number;
				weight: number;
				primaryPhotoUrl: string;
				photoCount: number;
				farmId: Guid;
				farmName: string;
				createdDate: Date;
				auctionEndDate?: Date;
				bidCount: number;
				highestBid?: number;
			}
		}

		export namespace Update {
			export const RequestPath = AppConfig.AnimalMarketUrl + '/Animals/Update';
			export const Request = (data: IRequestModel) => ApiService.call<IResponseModel>(axios.post(RequestPath, { ...data }));
			export interface IRequestModel {
				animalId: Guid;
				name: string;
				description: string;
				price?: number;
				isNegotiable?: boolean;
				saleType?: Enums.AnimalSaleType;
				weight?: number;
				healthStatus: string;
				status?: Enums.AnimalStatus;
				city: string;
				district: string;
			}
			export interface IResponseModel {
				id: Guid;
				name: string;
				price: number;
				isNegotiable: boolean;
				saleType: Enums.AnimalSaleType;
				status: Enums.AnimalStatus;
				updatedAt: Date;
			}
		}

		export namespace Expire {
			export const RequestPath = AppConfig.AnimalMarketUrl + '/Animals/Expire';
			export const Request = (data: IRequestModel) => ApiService.call<IResponseModel>(axios.post(RequestPath, { ...data }));
			export interface IRequestModel {
				animalId: Guid;
			}
			export interface IResponseModel {
				success: boolean;
			}
		}

		export namespace Delete {
			export const RequestPath = AppConfig.AnimalMarketUrl + '/Animals/Delete';
			export const Request = (data: IRequestModel) => ApiService.call<IResponseModel>(axios.post(RequestPath, { ...data }));
			export interface IRequestModel {
				animalId: Guid;
			}
			export interface IResponseModel {
				id: Guid;
				deleted: boolean;
				deletedAt: Date;
			}
		}

		export namespace Create {
			export const RequestPath = AppConfig.AnimalMarketUrl + '/Animals/Create';
			export const Request = (data: IRequestModel) => ApiService.call<IResponseModel>(axios.post(RequestPath, { ...data }));
			export interface IRequestModel {
				species: string;
				breed: string;
				ageMonth: number;
				liveWeightKg: number;
				gender: string;
				earTagNo: string;
				price: number;
				includeDelivery?: boolean;
				photoUrls: string[];
				documentUrls: string[];
				farmId: Guid;
				city: string;
				district: string;
				latitude?: Double;
				longitude?: Double;
			}
			export interface IObject {
			}
			export interface IStringArray {
				length: number;
				longLength: number;
				rank: number;
				syncRoot: IObject;
				isReadOnly: boolean;
				isFixedSize: boolean;
				isSynchronized: boolean;
			}
			export interface IResponseModel {
				animalId: Guid;
			}
		}

	}

	export namespace AnimalPhotos {

		export namespace Detail {
			export const RequestPath = AppConfig.AnimalMarketUrl + '/AnimalPhotos/Detail';
			export const Request = (data: IRequestModel) => ApiService.call<IResponseModel>(axios.post(RequestPath, { ...data }));
			export interface IRequestModel {
				photoId: Guid;
			}
			export interface IResponseModel {
				id: Guid;
				animalId: Guid;
				photoUrl: string;
				caption: string;
				displayOrder: number;
				createdAt: Date;
				createdBy: Guid;
			}
		}

		export namespace All {
			export const RequestPath = AppConfig.AnimalMarketUrl + '/AnimalPhotos/All';
			export const Request = (data: IRequestModel) => ApiService.call<IResponseModel>(axios.post(RequestPath, { ...data }));
			export interface IRequestModel {
				animalId: Guid;
				page: number;
				pageSize: number;
			}
			export interface IResponseModel {
				photos: IPhotoItem[];
				totalCount: number;
				page: number;
				pageSize: number;
			}
			export interface IPhotoItem {
				id: Guid;
				photoUrl: string;
				caption: string;
				displayOrder: number;
				createdAt: Date;
			}
		}

		export namespace Upload {
			export const RequestPath = AppConfig.AnimalMarketUrl + '/AnimalPhotos/Upload';
			export const Request = (data: IRequestModel) => ApiService.call<IResponseModel>(axios.post(RequestPath, { ...data }));
			export interface IRequestModel {
				animalId: Guid;
				photoUrl: string;
				caption: string;
				displayOrder: number;
			}
			export interface IResponseModel {
				id: Guid;
			}
		}

		export namespace Delete {
			export const RequestPath = AppConfig.AnimalMarketUrl + '/AnimalPhotos/Delete';
			export const Request = (data: IRequestModel) => ApiService.call<IResponseModel>(axios.post(RequestPath, { ...data }));
			export interface IRequestModel {
				photoId: Guid;
			}
			export interface IResponseModel {
				success: boolean;
			}
		}

	}

}